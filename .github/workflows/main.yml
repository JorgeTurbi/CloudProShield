name: CI/CD ‚Äì CloudProSUITE (Docker on Ubuntu Server)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/jorgeturbi/cloudproshield
  REPO_URL: https://github.com/JorgeTurbi/CloudProShield
  COMPOSE_PATH: docker-compose.yml
  ENV_PATH: .env

jobs:
  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout (app repo)
        uses: actions/checkout@v4

      - name: Set short SHA
        id: set_short_sha
        run: echo "sha_short=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore ./CloudShield.csproj

      - name: Build (Release)
        run: dotnet build ./CloudShield.csproj -c Release --no-restore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (App)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.set_short_sha.outputs.sha_short }}
          provenance: false

      - name: Build & Push (Migrator)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.migrator
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}-migrator:latest
            ${{ env.IMAGE_NAME }}-migrator:${{ steps.set_short_sha.outputs.sha_short }}
          provenance: false

      - name: Output info
        run: |
          echo "‚úÖ Images pushed to GHCR:"
          echo "  - ${{ env.IMAGE_NAME }}:latest"
          echo "  - ${{ env.IMAGE_NAME }}:${{ steps.set_short_sha.outputs.sha_short }}"
          echo "  - ${{ env.IMAGE_NAME }}-migrator:latest"

  deploy:
    name: Deploy on Ubuntu (Docker Compose)
    runs-on: self-hosted
    needs: build-and-push

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout infra repo (CloudProShield)
        uses: actions/checkout@v4
        with:
          repository: JorgeTurbi/CloudProShield
          ref: main
          path: infra

      - name: Verify required files
        run: |
          set -e
          cd infra
          echo "üìÇ Contenido de infra:"
          ls -la
          test -f "${{ env.COMPOSE_PATH }}" || { echo "‚ùå No existe ${{ env.COMPOSE_PATH }} en el repo CloudProShield"; exit 1; }
          if [ -f "${{ env.ENV_PATH }}" ]; then
            echo "‚úÖ Se encontr√≥ ${{ env.ENV_PATH }}"
          else
            echo "‚ÑπÔ∏è No .env file (continuando con defaults del compose)"
          fi

      - name: Login to GHCR (server)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          TOKEN="$GHCR_TOKEN"
          if [ -z "$TOKEN" ]; then
            echo "‚ö†Ô∏è GHCR_TOKEN no definido; intentando con GITHUB_TOKEN"
            TOKEN="$GITHUB_TOKEN"
          fi
          echo "$TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Deploy with Docker Compose
        working-directory: infra
        shell: bash
        run: |
          set -e
          # Ruta absoluta del .env
          ENV_ABS="$(pwd)/${{ env.ENV_PATH }}"
          # Construye el argumento --env-file como array solo si existe
          ENV_ARGS=()
          if [[ -s "$ENV_ABS" ]]; then
            echo "üîß Cargando variables de $ENV_ABS"
            set -a
            . "$ENV_ABS"
            set +a
            ENV_ARGS=(--env-file "$ENV_ABS")
          else
            echo "‚ÑπÔ∏è No existe $ENV_ABS; no se pasar√° --env-file"
          fi

          echo "REGISTRY_PREFIX=${REGISTRY_PREFIX:-ghcr.io/jorgeturbi}"
          echo "TAG=${TAG:-latest}"

          echo "üîÑ docker compose pull"
          docker compose -f "${{ env.COMPOSE_PATH }}" "${ENV_ARGS[@]}" pull

          echo "üöÄ docker compose up"
          docker compose -f "${{ env.COMPOSE_PATH }}" "${ENV_ARGS[@]}" up -d --remove-orphans

          echo "üìã docker compose ps"
          docker compose -f "${{ env.COMPOSE_PATH }}" ps

      - name: Docker info (host)
        run: |
          docker info || true
          docker ps || true
