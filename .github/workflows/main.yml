name: CI/CD ‚Äì CloudProSUITE (Docker on Ubuntu Server)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/jorgeturbi/cloudproshield
  REPO_URL: https://github.com/JorgeTurbi/CloudProShield
  COMPOSE_PATH: docker-compose.yml
  ENV_PATH: .env

jobs:
  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      sha_short: ${{ steps.set_short_sha.outputs.sha_short }}

    steps:
      - name: Checkout (app repo)
        uses: actions/checkout@v4

      - name: Set short SHA
        id: set_short_sha
        run: echo "sha_short=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore ./CloudShield.csproj

      - name: Build (Release)
        run: dotnet build ./CloudShield.csproj -c Release --no-restore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (App)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.set_short_sha.outputs.sha_short }}
          provenance: false

      - name: Build & Push (Migrator)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.migrator
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}-migrator:latest
            ${{ env.IMAGE_NAME }}-migrator:${{ steps.set_short_sha.outputs.sha_short }}
          provenance: false

      - name: Output info
        run: |
          echo "‚úÖ Images pushed to GHCR:"
          echo "  - ${{ env.IMAGE_NAME }}:latest"
          echo "  - ${{ env.IMAGE_NAME }}:${{ steps.set_short_sha.outputs.sha_short }}"
          echo "  - ${{ env.IMAGE_NAME }}-migrator:latest"

  deploy:
    name: Deploy on Ubuntu (Docker Compose)
    runs-on: self-hosted
    needs: build-and-push

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout infra repo (CloudProShield)
        uses: actions/checkout@v4
        with:
          repository: JorgeTurbi/CloudProShield
          ref: main
          path: infra

      - name: Ensure Docker Compose v2
        run: |
          if ! docker compose version >/dev/null 2>&1; then
            echo "üõë Docker Compose v2 no est√° instalado. Instala docker-compose-plugin."
            exit 1
          fi

      - name: Debug runner user & docker
        run: |
          echo "whoami: $(whoami)"
          id || true
          docker info | head -n 20 || true

      - name: Login to GHCR (server)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -e
          TOKEN="${GHCR_TOKEN:-$GITHUB_TOKEN}"
          echo "$TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "‚úÖ Login GHCR ok"

      - name: Prepare env file for compose
        working-directory: infra
        run: |
          # Usa el tag exacto reci√©n construido (sha corto). Fallback a 'latest' si no llega del job anterior.
          TAG_FROM_BUILD="${{ needs.build-and-push.outputs.sha_short }}"
          TAG_VALUE="${TAG_FROM_BUILD:-latest}"
          echo "REGISTRY_PREFIX=ghcr.io/jorgeturbi" > "${{ env.ENV_PATH }}"
          echo "TAG=$TAG_VALUE" >> "${{ env.ENV_PATH }}"
          echo "üìÑ .env generado:"
          cat "${{ env.ENV_PATH }}"

      - name: Deploy with Docker Compose
        working-directory: infra
        shell: bash
        run: |
          set -e

          # Usa docker o sudo docker seg√∫n permisos del socket
          if docker info >/dev/null 2>&1; then
            DOCKER=docker
          else
            echo "‚ÑπÔ∏è Sin permisos directos al socket; usando sudo docker"
            DOCKER="sudo docker"
          fi

          # Argumento --env-file si existe .env
          ENV_ABS="$(pwd)/${{ env.ENV_PATH }}"
          ENV_ARGS=()
          if [[ -s "$ENV_ABS" ]]; then
            ENV_ARGS=(--env-file "$ENV_ABS")
          fi

          echo "üîª Teardown previo (si lo hay)"
          $DOCKER compose -f "${{ env.COMPOSE_PATH }}" down --volumes --remove-orphans || true

          echo "üîÑ Pull im√°genes"
          $DOCKER compose -f "${{ env.COMPOSE_PATH }}" "${ENV_ARGS[@]}" pull

          echo "üöÄ Up servicios"
          $DOCKER compose -f "${{ env.COMPOSE_PATH }}" "${ENV_ARGS[@]}" up -d --remove-orphans
          $DOCKER compose -f "${{ env.COMPOSE_PATH }}" ps

          echo "üß∞ Ejecutar migradores si existen"
          SVCS=$($DOCKER compose -f "${{ env.COMPOSE_PATH }}" config --services | grep -E 'migrator$' || true)
          if [[ -n "$SVCS" ]]; then
            for s in $SVCS; do
              echo "‚ñ∂Ô∏è $s"
              if ! $DOCKER compose -f "${{ env.COMPOSE_PATH }}" "${ENV_ARGS[@]}" run --rm "$s"; then
                echo "‚ö†Ô∏è Migrator $s fall√≥ (continuando)"
              fi
            done
          else
            echo "‚ÑπÔ∏è No hay servicios migrator definidos."
          fi

      - name: Docker info (host)
        run: |
          docker info || true
          docker ps || true
