name: Deploy on Ubuntu (Docker Compose)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write  # publicar imagen en GHCR

env:
  IMAGE_NAME: ghcr.io/jorgeturbi/cloudproshield
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  build-push-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set short SHA
        id: meta
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR (con github.token)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build \
            -t "$IMAGE_NAME:${{ steps.meta.outputs.SHORT_SHA }}" \
            -t "$IMAGE_NAME:latest" \
            -f Dockerfile \
            .

      - name: Push image tags
        run: |
          docker push "$IMAGE_NAME:${{ steps.meta.outputs.SHORT_SHA }}"
          docker push "$IMAGE_NAME:latest"

      # Generar SIEMPRE un .env local (si no hay secret, crea uno mínimo)
      - name: Materialize .env (from APP_ENV_FILE or defaults)
        shell: bash
        env:
          APP_ENV_FILE: ${{ secrets.APP_ENV_FILE }}
        run: |
          set -e
          if [ -n "${APP_ENV_FILE:-}" ]; then
            printf '%s\n' "$APP_ENV_FILE" > .env
            echo ".env generado desde secret APP_ENV_FILE"
          else
            {
              echo "# fallback .env generado automáticamente"
              echo "ASPNETCORE_ENVIRONMENT=Production"
              # Añade aquí valores mínimos que tu app soporte sin romperse
              # Por ejemplo:
              # echo "ConnectionStrings__DefaultConnection=Server=172.17.0.1,1433;Database=CloudShield;User Id=sa;Password=***;Encrypt=False;TrustServerCertificate=True;MultipleActiveResultSets=true"
            } > .env
            echo "APP_ENV_FILE no definido; .env mínimo creado para que compose no falle"
          fi
          # Verificación sin exponer secretos
          test -f .env && echo ".env presente (size: $(wc -c < .env) bytes)"

      - name: Deploy with Docker Compose
        run: |
          docker compose -f "$DOCKER_COMPOSE_FILE" pull
          docker compose -f "$DOCKER_COMPOSE_FILE" up -d --remove-orphans
          docker image prune -f
